# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from server.models.base_model_ import Model
from server import util


class InventoryInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, part_number: str=None, lot_number: str=None, quantity: int=None, last_updated: str=None):  # noqa: E501
        """InventoryInfo - a model defined in Swagger

        :param part_number: The part_number of this InventoryInfo.  # noqa: E501
        :type part_number: str
        :param lot_number: The lot_number of this InventoryInfo.  # noqa: E501
        :type lot_number: str
        :param quantity: The quantity of this InventoryInfo.  # noqa: E501
        :type quantity: int
        :param last_updated: The last_updated of this InventoryInfo.  # noqa: E501
        :type last_updated: str
        """
        self.swagger_types = {
            'part_number': str,
            'lot_number': str,
            'quantity': int,
            'last_updated': str
        }

        self.attribute_map = {
            'part_number': 'part_number',
            'lot_number': 'lot_number',
            'quantity': 'quantity',
            'last_updated': 'last_updated'
        }
        self._part_number = part_number
        self._lot_number = lot_number
        self._quantity = quantity
        self._last_updated = last_updated

    @classmethod
    def from_dict(cls, dikt) -> 'InventoryInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inventoryInfo of this InventoryInfo.  # noqa: E501
        :rtype: InventoryInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def part_number(self) -> str:
        """Gets the part_number of this InventoryInfo.


        :return: The part_number of this InventoryInfo.
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number: str):
        """Sets the part_number of this InventoryInfo.


        :param part_number: The part_number of this InventoryInfo.
        :type part_number: str
        """
        if part_number is None:
            raise ValueError("Invalid value for `part_number`, must not be `None`")  # noqa: E501

        self._part_number = part_number

    @property
    def lot_number(self) -> str:
        """Gets the lot_number of this InventoryInfo.


        :return: The lot_number of this InventoryInfo.
        :rtype: str
        """
        return self._lot_number

    @lot_number.setter
    def lot_number(self, lot_number: str):
        """Sets the lot_number of this InventoryInfo.


        :param lot_number: The lot_number of this InventoryInfo.
        :type lot_number: str
        """

        self._lot_number = lot_number

    @property
    def quantity(self) -> int:
        """Gets the quantity of this InventoryInfo.


        :return: The quantity of this InventoryInfo.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this InventoryInfo.


        :param quantity: The quantity of this InventoryInfo.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def last_updated(self) -> str:
        """Gets the last_updated of this InventoryInfo.


        :return: The last_updated of this InventoryInfo.
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: str):
        """Sets the last_updated of this InventoryInfo.


        :param last_updated: The last_updated of this InventoryInfo.
        :type last_updated: str
        """

        self._last_updated = last_updated
